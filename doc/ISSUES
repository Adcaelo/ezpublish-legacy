A list of issues:
-----------------

SEARCH
------
Fix problems with ащ type characters in search. MySQL will think
bug and bщg is the same word and the search will be messed up.
In ez.no test it bugs in 20 of 12000+ words.

Implement support for ш->oe е->aa translation in search index.

Improve search algorithm for large databases.


DESIGN/LAYOUT
------------
Create custom templates for a default setup
Usability tests on 3.0 final for improvements
Improve browser compatibility
WAI testsCr

Information collection
---------------------
Validation on fields

CACHING
-----------
Design keys and other variables should be more easily available.
Design keys is now mis-used.
Consider the template namespace "leaking"

SPEED
-------
Page load time optimization
Memory usage optimization
SQL query optmization

Central optimization pages:
- content view
- content edit
- publish process
- search


DOCUMENTATION
-------------

- Proof read by english native speakers
- Have non-technical people writing documentation
- Add basic introduction
- Add tutorials with much details.
- How to write a module

FEATURES
--------

- Oracle support.

module.php:
- Better names for ViewList keys, params should parameters etc..
Actions:

Actions:
- Make sure all views is moved away from postvariable checking and instead
  uses the action system and action parameters.
Template variables:
- Read only views should only pass as little as template variables as possible
  ie. just id's from input paramaters, it should be up to the template to fetch
  the actual objects and lists using the /fetch/ operator.
- Better names for template variables, for instance variables named attributes
  should be changed into attribute_list.
- Close the leak between view tempaltes and pagelayout.tpl -> so people will 
  not be confused when using cached views?

Path:
- Make sure all views has at least a simple path element.
- Figure out a way to allow templates to override path and other variables
  returned by a view. That way templates has even more control over the
  design.
Loops:
- Change all code that loops using:
reset( $list );
while ( ( $key = key( $list ) ) !== null )
{
  $item =& $list[$key];
  next( $list );
}

into

foreach ( array_keys( $list ) as $key )
{
  $item =& $list[$key];
}

Section issue:
Problem when having two node placements in different "sections". The main node section
will force the design. Makes it harder to share content between sitedesigns.

Class/object feature
-----------------
To have the possibility to get additional attributes dynamically. Similar to the 
article types in 2.2.


Module:
- Do some changes the eZModule class, it should be created a eZModuleView class
  which will replace the $Module object in the views.
- Cleanup eZModule, there's some old code and variable names left there.
- Figure out if we need to move the class out of lib, or if we can move some of
  the specific code out of it.
Redirects:
- Change all redirect code to use redirectToView instead of redirectTo which
  requires the url to be created by the client, redirectToView takes care of this
  automatically.
Errors:
- Make sure input data is validated before using it, if they are invalid issue
  an error with handleError.
Functions:
- Implement more module functions, currently content is the only module which
  has defined any.
DataTypes:
- Create a system (perhaps in the eZDatatype class) which allows datatypes to
  fetch post variables without knowing that they are post variables.
Validators:
- The validator classes should not use regexs since they will not work properly
  with some charsets.

Features:
user/register:
Some sites might now want to allow user specified login id's, so it should be configurable
in site.ini if the "Login ID" is shown. Login ID could be made from name, email or generated
by site. The same goes for passwords, some sites don't want user specified passwords
(because they are often insecure).

User ID hash should not be made of only login and user id, the current time value should be
added and the hash should be stored in the db for later checking in user/activate.
Also register hashes should have a timeout value to clean up users which were never activated.

user/success should not be used, instead the register page should display a different template
displaying the content of the user/success. The page should give more information on what
to do with the email.

eZMail:
Also i18n system should be expanded to allow quoted-printable which is often used in mails.
(it's an encoding scheme not a charset).


Classes:
Add a checkbox to each attribute which tells whether the attribute is considered a content
attribute or a metadata attribute. Metadata attributes are not translated and are generally
not shown in views but instead used to control objects, like "have comments".

Add a mass add text field which one can enter datatypes one line after another and click
add to get them all, this makes it easier to setup classes. To make this work the combobox
must default to a None entry. It might even be possible to have options for datatypes.

Add the posibility to include classes. E.g. have a base class which is included/inherited
by some other classes.

Policy:
Make policy checking more centralized instead of copying code all the time.

Versionview:
- what to do for non-existing nodes?

Versions:
- A link should only be shown for versions which are viewable by the user.
- Store previous version in new versions, that way it's possible to see the
  progress of version and show branches. A previous version of 0 is considered
  a starting version.

Browsers:
- Create a framework for checking browser type, version and OS and make it
  accessible from templates.
- Create template operators/functions which will input HTML data according to
  browser data. For instance
  checked="checked" vs checked.
  multiple="multiple" vs multiple
  selected="selected" vs selected


DEBUG
---------
Does not work with IP settings anymore.

http image post variables
-------------------------
We handle image post variables and buttons in the same way so that one can change the 
buttons to nice images.

DateTime
--------
The return hour is always (input-1). It works properly right now by using simple justment in input value, need to 
find out what is the real reason. 
See http://www.php.net/manual/en/function.mktime.php, we might need a site.ini setting for this to work properly?

Search
------
Too many database calls when indexing objects. Need to find the unique words
in PHP so that we will only index unique words.

пїЅ? caracters do not work properly, we must also test russian and chinese.
Probably the same error there.

Note: non-ASCII character support must be done with the i18n system.

Translate
---------
Complex data types, e.g. image, does not work when translating.
Translated objects are not indexed in search.

Tasks
------------------------------------------
Error: error executing query: SELECT contentclass_id, contentclass_version, group_id, group_name
FROM   ezcontentclass_classgroup
WHERE  group_id IN ( '7' )  AND contentclass_version='0'
GROUP BY contentclass_id
ORDER BY contentclass_id ASC ERROR:  Attribute ezcontentclass_classgroup.contentclass_version must be GROUPed or used in an aggregate function
    on postgressql

Deprecated function in PHP 4.1.0
---------------------------------------------
call_user_method_array()

Perfomance problems:

Nice Urls
---------------------
When we change tha name of toplevel object, we need to recalculate CRC32
path for each child object. It can bee a perfomance impact for large sites
whan we change the name of "very toplevel" folder. So it can be timeouts
on server as well.

Bug:
Delete multiple node assignment gets this error:
string(3) "179" 
Fatal error: Call to a member function on a non-object in /home/bf/projects/php/nextgen/kernel/classes/ezcontentobjecttreenode.php on line 749

        if ( $nodeID == 0 )
        {
            $node =& $this;
that line ->            $nodeID = $node->attribute( 'node_id' );
        }


Create a policy for releases, it will explain how to do a release ie test
procedure, packaging, PR etc.. Define how each release should explain what has
been changed. For instance it's important to know if a new release requires
updates to it's language files, template files etc..
Create a good test list for a release, this can be done by using eZ publish
itself, create one or more classes which works as a checklist.

Implement the "ticket" system for secure forms (and doubleclick detection).

Secure pages (HTTPS), for instance login page and payment page.

Global notification/hook system, for instance the content object system would
add a hook entry to the class system, when a class definition changes the
content object hook entry would be run and it could updates to the affected
objects. This is extremely useful for third-party modules which might need
notification on changes.


Rename current eZPersistentObject class to eZPersistentSQLObject and make a new
eZPersistentObject which uses the SQL one. Then create new persistent class for
instance eZPersistentFileObject, eZPersistentLDAPObject,
eZPersistentSOAPObject, and then specify for each object what persistent type
is to be used. Could be used for caching rarely changed objects on file or in
shared memory/session , ie no interface changes to existing classes.

Updates
-------
Discuss how future updates should be handled, will probably be done using the
setup page. Maybe even add support for checking for new versions on
ez.no/developer and fetching them. Give overview of all changes in different
versions. How this affects SOAP/DE should also be considered.

Digital signing of libraries/kernel/plugins using PGP/GPG. That way it's
possible to create third level plugings and let them be signed by eZ thus
ensuring users that this is the real deal( no viruses, trojan horses etc.)


Translation & Unicode
-----------
Translation system must be 100% finished.
- Added caching of XML files into PHP files.
- Create utilities which scan templates/code for translation elements and
  create the necessary translation files.
- Add support for character decomposition, that is decompose characters which are
  not part of the US-ASCII charset into multiple characters. For instance
  е becomes aa, ж becomes ae, ш becomes oe and Я becomes ss.

--------------
Implementation
--------------

Forum
-----
Forum, look at popular forums(eg. vBulletin) and see how they can be solved
with 3.0 release functionality. Write a good documentation on how to implement
forums(simple and advanced). Documents for how to deal with bugs, supports and
project management might also be need, probably others as well.

Tasks
------
- Task / message system
The messaging or task system will be closely related to the workflows, since 
workflows can generate tasks for users. Messages can be used for internal 
messaging.
- My tasks page
A page with overview of the current users tasks, drafts and messages.
- All tasks page
A page with overview of all the users open tasks, drafts and messages ( need 
to be root - mabye we should not have the messages here "privacy" ? )

Content class
-------------
  - Add default view mode to classes, this default view mode is copied when
creating an object and may be changed again. Used where no view mode is
specified.


Content object
--------------

Create cached copy of datatype string in ezcontentobjectattribute. This is to save
a database call when instanciating a new datatype ( which now checks the datatypestring
from the classattribute )

See how we can solve sorting, maybe using a separate table for sorting is good,
the table would have n columns, one for each sort type (excluding
asc/desc). All columns uses simple integers for sorting, that way it's possible
to cache advanced sorting algorithms (Unicode sorting or multiple column sorting).


Version
  - Support for named versions, and comment on each version ( will work as a log )
  - Add version alias - needs to be speced. Though is multiple revert to  
 "before release" etc..
  
Search
  - Add - and multiple "" and OR operator
  - Add time and section limitation on advanced search
  - Index speedup

Trash can
  - Add trash can functionality. Mabye this should be implemented in the version system. 
    V1, v2, v3... v5 == deleted. This will enable rollback of deleted objects.

Copy support
 - Copy content object
 - Copy content class
   - Copy attribute
 - Copy content object subtree.

Newsletter
----------
  We need to possiblity for users to subscribe to new published objects ( can 
be just "e-mail" objects ) based on the following:
 - Section, Class, Node, Keywords e.g. "linux" and fulltext phrase match.
 - Newsletters can be sent as internal messages or e-mail/SMS...

User management
---------------
  - Figure out how to handle "my account" and user registering/login.
  - Add/test user registration 
  - Add e-mail verification
  - Add forgot password
  - here we need some IP settings for domain checks/limitation... need to
  discuss.
 - Defining default pages per user, group and/or role. For instance partners would
 get a special page while anon users gets another.  Sugg. impl: add setting on main user group.

Shop:
-----
  - Add option support with prices
  - Add VAT settings
  - Add price groups ( need to set up ez.no ) with partner price. Here we need
   both % setting and specific price for each group. Needs to be speced.
  - Add shipping setting
  - Add order search
  - Add customer list
  - Add order export, need to implement e-mail for now. ( plugin )
  - Add/test payment workflow
  - Add/test buy license product (pre and post workflow)

Image
-----
Go over the image systems, there are some bugs with it in certain cases. A good
idea is to do some refactoring here as well(internal).
Make a .ini file(or similar) for configuring the image system, mime-types and
which conversions types to use.
Solve the mime-type system which is also used by the filehandling.

General
___________
* Fixed for eZDB
- Change all associative arrays to only use lowercase letters for keys.
  For instance eZDB must be changed (Limit,Offset).

Files
------------------------------------------------
- Figure out how to handle file downloading with permissions enabled.
  This must work with everything ranging from images to binary files.
- Create the filemanager system which will handle uploading files externally
  and creating content objects out of them. At least the basic framework should
  be done and do all the fancy stuff for 3.1.

Site admin
-----------

The site admin is the only available module for first time installs,
upgrades will also be handled by this.

* required for first time installs to finish

- DB initialization*, checking and upgrading
- Cache control
  - clear cache
  - check cache status ( size etc )
- Disk control
  - Check used disk space
  - File permission check*
- Backup
  - Design backup
  - Database backup
  - Images/files backup
- Log file
  - view / search
  - rotate logfile
- Design/template edit ( need versioning )
- Settings
  - view site.ini
  - edit site.ini
- Server status
  - View versions and supported software + give instructions
    for compiling in extensions or how to get software
     - PHP
     - Apache
     - Linux/Windows/OS
     - ImageMagick
     - GD
     - MBString
     ....Enything else we can use?

images
------

- Convert all gif images to png, we can't really use gif unless we pay
  royalties to Unisys. Besides png is much better and is support by major
  browsers.
- Make sure we pngcrush for making pngs smaller, some programs (such as Photoshop)
  doesn't store optimized pngs (and also bad png files).
  pngcrush homepage:
  http://freshmeat.net/projects/pngcrush/?topic_id=105%2C42

Some crazy ideas we could think about:
--------------------------------------
- Move class relation from objects to object versions, that way it's possible
  for an object to change class in a new version. That way all version history
  is preserved. This would also require a convert utility where one can specify
  which source field is to moved to which destination field (maybe even
  automatic rules?).
  Add better versioning for classes, that way when a class gets new(or changes)
  attributes and objects already use that class they won't be affected until a
  new version is created, ie they link to the class id and class version in an
  object version. Again version history is preserved.

Search / binaryfile datatype metadata
------------------------------------
We need to add a plugin system which generates meta data for binary files based
on mime. E.g. we need a word and PDF indexer.

Locale
-------
Add documents explaining how to write locale files and how to use them.

----------
Make sure all views uses the action system instead of post variables directly.
Add function support to all modules that could use it.

-----------
Add doc on howto read the currently selected sitedesign.


eZ Setup System
-----------------------------------------------

# Possible bug: When no password is used the username is blank.

- See if the demo data installation can be done differently, ie less memory usage and cpu time.

- See if eZ publish works with different charsets.

- See if it's possible to implement array_key_exists with pure PHP and see if we can lower
  the min requirements because of this.

- Support for e-mail address for registration, if it is supplied we can give
  feedback to the user.

- Warn for mbstring extension bug, see http://bugs.php.net/bug.php?id=19347

- Safe mode detection and also base_dir restriction.

Classes
-----------
- Group names should not be cached in the group/class link table, it should be taken from the
  group list.

Binary files
---------------
Possiblity to calculate md5, use md5_file to calculate it. (Requires PHP 4.2.0 or higher, should be optional)

Datatypes
---------------
Make it easier to create new datatypes by having mapping of attribute names (data_int, data_text etc.) to
more sensible names for the datatype.
Also helper functions for post variable fetching, validation etc.. should be made.
Allow one datatype class to handle multiple datatype strings, for instance all date datatypes could
be handled by one class. (Maybe create a proxy class which inherits from eZDataType, it takes a class/object
as constructor parameter and forwards all requests to that class, could be useful shared code).

Caching
-------------
See if we can create smarter HTTP cache handling, for instance it could be possible to enable caching for
some sites.

Template engine
---------------
- Whitespace handling, improve to allow whitespace more places eg. let a = 1 etc..


Internal linking
-----------------
A browse function for linking internally to other pages. Similar to related object.

