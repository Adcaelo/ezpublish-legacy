Major code issues:
module.php:
- Better names for ViewList keys, params should parameters etc..
Actions:
- Make sure all views is moved away from postvariable checking and instead
  uses the action system and action parameters.
Template variables:
- Read only views should only pass as little as template variables as possible
  ie. just id's from input paramaters, it should be up to the template to fetch
  the actual objects and lists using the /fetch/ operator.
- Better names for template variables, for instance variables named attributes
  should be changed into attribute_list.
Path:
- Make sure all views has at least a simple path element.
- Figure out a way to allow templates to override path and other variables
  returned by a view. That way templates has even more control over the
  design.
Loops:
- Change all code that loops using:
reset( $list );
while ( ( $key = key( $list ) ) !== null )
{
  $item =& $list[$key];
  next( $list );
}

into

foreach ( array_keys( $list ) as $key )
{
  $item =& $list[$key];
}

Module:
- Do some changes the eZModule class, it should be created a eZModuleView class
  which will replace the $Module object in the views.
- Cleanup eZModule, there's some old code and variable names left there.
- Figure out if we need to move the class out of lib, or if we can move some of
  the specific code out of it.
Redirects:
- Change all redirect code to use redirectToView instead of redirectTo which
  requires the url to be created by the client, redirectToView takes care of this
  automatically.
Errors:
- Make sure input data is validated before using it, if they are invalid issue
  an error with handleError.
Functions:
- Implement more module functions, currently content is the only module which
  has defined any.
DataTypes:
- Create a system (perhaps in the eZDatatype class) which allows datatypes to
  fetch post variables without knowing that they are post variables.
Validators:
- The validator classes should not use regexs since they will not work properly
  with some charsets.

Features:
user/register:
Some sites might now want to allow user specified login id's, so it should be configurable
in site.ini if the "Login ID" is shown. Login ID could be made from name, email or generated
by site. The same goes for passwords, some sites don't want user specified passwords
(because they are often insecure).

User ID hash should not be made of only login and user id, the current time value should be
added and the hash should be stored in the db for later checking in user/activate.
Also register hashes should have a timeout value to clean up users which were never activated.

user/success should not be used, instead the register page should display a different template
displaying the content of the user/success. The page should give more information on what
to do with the email.

eZMail:
Mails should be composed by templates not PHP code, and also emails should not contain unix
endlines (\n) but instead DOS endlines (\r\n). The mail rfc should be examined more closely
too make sure we send out valid mails.
Sender, receiver etc.. should not have their own functions instead a setAttribute style
should be used, emails can have many different kinds of attributes(or what it's called in mails)
including custom made. The body is the only exception i believe.
Also i18n system should be expanded to allow quoted-printable which is often used in mails.
(it's an encoding scheme not a charset).

Classes:
Add a checkbox to each attribute which tells whether the attribute is considered a content
attribute or a metadata attribute. Metadata attributes are not translated and are generally
not shown in views but instead used to control objects, like "have comments".

Policy:
Make policy checking more centralized instead of copying code all the time.

Versionview:
- temp_node should only be used for non-published versions,
  if published use real node.
- what to do for non-existing nodes?

Versions:
- A link should only be shown for versions which are viewable by the user.

Browsers:
- Create a framework for checking browser type, version and OS and make it
  accessible from templates.
- Create template operators/functions which will input HTML data according to
  browser data. For instance
  checked="checked" vs checked.
  multiple="multiple" vs multiple
  selected="selected" vs selected
