*Title: Improvements to related objects added from XML block text field.

* Back-compatibility and upgrading

This feature is enabled only if the next setting is 'enabled':
 site.ini:[BackwardCompatibilitySettings].ObjectRelationTyped

If you plan to use this feature on the existing database, please run upgrade
script: update/common/scripts/3.9/updatetypedrelation.php

*Documentation:

There are 4 types of relations between objects in the system:

- 'Common'. Relations of common type are created when user adds related
objects manually.

- 'XML linked'. Relations of this type are added automatically when you
save object containing XML fields with <link> tags referencing objects or nodes
(ex: <link href='ezobject://123>... ). Note that when you remove <link> tag
and store object, the corresponding relation will be automatically removed.

- 'XML embedded'. Relations of this type are added automatically when you save
object containing XML fields with <embed> tags embedding objects or nodes.
Note that when you remove <embed> tag and store object, the corresponding
relation will be automatically removed.

- 'by Attribute'. Relations made by attributes of "Object relation" and
"Object relation list" datatypes.


*Template fetch functions:

The following fetch functions have been modified: related_objects,
related_objects_count, reverse_related_objects, reverse_related_objects_count.

Parameter 'all_relations' now has mixed type. It could be boolean true/false
like it was in 3.8, but it can be also an array. Array may consists of the
following strings: 'common', 'xml_link', 'xml_embed', 'attribute'. Each of
them mean corresponding relation type. Types can be mixed and placed in any
order. Also this new parameter is fully compatible with other options.

Also the following functional attributes has been added to ezcontentobject
class:

linked_contentobject_array
embedded_contentobject_array
reverse_embedded_contentobject_array
reverse_linked_contentobject_array

They act like corresponding fetch functions return all related or reverse-related
objects of a specific type.

*Examples:

Both examples return array of objects "linked" to the object $my_object.

{def $linked = fetch( 'content', 'related_objects', hash( 'object_id', $my_object.id, 'all_relations', array( 'xml_link' ) ) )}
                                                        
{def $linked = $my_object.linked_contentobject_array}