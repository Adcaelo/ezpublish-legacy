*Title: SSL Zones.

*Incentive:

It might be needed to force access over SSL to certain site parts.
Such parts are called "SSL zones".

*Documentation:

SSL zone might be:
1. a content subtree (content SSL zone);
2. a module view.

In the first case all the operations (viewing, editing, creating child
nodes) on nodes belonging to the subtree are done over SSL.

When a user leaves an SSL zone (i.e. when  he/she is accessing a subtree
or module view that does not belong to any SSL zone), the user is
automatically switched back to plain HTTP (without SSL).

*Sample configuration:

### site.ini.append ###

[SiteSettings]
SSLPort=8443

[SSLZoneSettings]
# Enable/disable the SSL zones functionality.
SSLZones=enabled

# Content subtrees we must use SSL for.
SSLSubtrees[]
SSLSubtrees[]=/news
SSLSubtrees[]=/polls

# Default access mode is plain HTTP.
# It's possible to override access mode for specific views.
# If a view is defined as 'ssl' then HTTPS access mode is forced for this view.
# if a view is defined as 'keep' then no access mode change
# is allowed for this view, i.e. current access mode is kept.
ModuleViewAccessMode[shop/add]=ssl
ModuleViewAccessMode[shop/basket]=ssl
ModuleViewAccessMode[content/action]=keep
ModuleViewAccessMode[content/removeeditversion]=keep

# It's up to these views to choose the appropriate access mode
# (http or https) depending on their parameters (e.g. node/object id).
SmartViews[]
SmartViews[]=content/view
SmartViews[]=content/edit

*Implementation details:

Check if a module view should cause access mode switch is done in index.php
by calling eZSSLZone::checkModuleView().

Checks if a given object/node belongs to a content SSL zone (SSLSubtree)
are done in so-called "smart views" by calling
checkNodeID/checkNode/checkObject method of class eZSSLZone.

In order to make your module view "smart" (=to add content SSL zones
support) you should add something like this just after parsing module
parameters:

 // Check if we should switch access mode (http/http) for this node.
 include_once( 'kernel/classes/ezsslzone.php' );
 eZSSLZone::checkNodeID( '<module_name>', '<view_name>', $NodeID );

For mode details, look at public methods in ezsslzone.php.

*Known limitations:

It's not possible to switch acess mode for views that accept parameters
by POST method (e.g. content/action).

Moreover, such views will not work with SSLZones=enabled at all, unless
you mark them as 'keep' in ModuleViewAccessMode setting.
