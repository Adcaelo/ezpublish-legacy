<?php
//
// Definition of eZUser class
//
// Created on: <30-Apr-2002 16:47:08 bf>
//
// Copyright (C) 1999-2002 eZ systems as. All rights reserved.
//
// This source file is part of the eZ publish (tm) Open Source Content
// Management System.
//
// This file may be distributed and/or modified under the terms of the
// "GNU General Public License" version 2 as published by the Free
// Software Foundation and appearing in the file LICENSE.GPL included in
// the packaging of this file.
//
// Licencees holding valid "eZ publish professional licences" may use this
// file in accordance with the "eZ publish professional licence" Agreement
// provided with the Software.
//
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING
// THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE.
//
// The "eZ publish professional licence" is available at
// http://ez.no/home/licences/professional/. For pricing of this licence
// please contact us via e-mail to licence@ez.no. Further contact
// information is available at http://ez.no/home/contact/.
//
// The "GNU General Public License" (GPL) is available at
// http://www.gnu.org/copyleft/gpl.html.
//
// Contact licence@ez.no if any conditions of this licencing isn't clear to
// you.
//

/*!
  \class eZUserType ezuser.php
  \brief The class eZUserType handles registered users
  \ingroup eZKernel

*/

/*
define( "EZ_USER_ANONYMOUS_ID", 1 );

include_once( "lib/ezdb/classes/ezdb.php" );
include_once( "kernel/classes/ezpersistentobject.php" );
include_once( "kernel/classes/ezcontentclassattribute.php" );

class eZUserType extends eZPersistentObject
{
    function eZUserType( $row )
    {
        $this->eZPersistentObject( $row );
    }

    function &definition()
    {
        return array( "fields" => array( "contentobject_id" => "ContentObjectID",
                                         "login" => "Login",
                                         "email" => "Version",
                                         "password" => "Password"
                                         ),
                      "keys" => array( "contentobject_id" ),
                      "relations" => array( "contentobject_id" => array( "class" => "ezcontentobject",
                                                                                 "field" => "id" ) ),
                      "class_name" => "eZUserType",
                      "name" => "ezuser" );
    }

    function &create( $dataInstanceID )
    {
        $row = array(
            "content_data_instance_id" => $dataInstanceID
            );
        return new eZUserType( $row );
    }

    function &fetch( $id, $as_object = true )
    {
        return eZPersistentObject::fetchObject( eZUserType::definition(),
                                                null,
                                                array( "contentobject_id" => $id
                                                      ),
                                                $as_object );
    }

    function groups()
    {
        return array( 4 );
    }

    /*!
    \static
     Logs in the user if applied username and password is
     valid. The userID is returned if succesful, false if not.
    */
    function loginUser( $login, $password )
    {
        $http =& eZHttpTool::instance();
        $db =& eZDB::instance();

        $query = "SELECT contentobject_id as user_id FROM ezuser WHERE login='$login' AND password='$password'";

        $users =& $db->arrayQuery( $query );

        if ( count( $users ) == 1 )
        {
            $http->setSessionVariable( "eZUserTypeLoggedInID", $users[0]["user_id"] );
            return $users[0]["user_id"];
        }
        else
            return false;
    }

    /*!
     Returns the currently logged in user.
     */
    function &currentUser()
    {
        $http =& eZHttpTool::instance();

        $currentUserID = $http->sessionVariable( "eZUserTypeLoggedInID" );
        $currentUser =& eZUserType::fetch( $currentUserID );

        // default to anonymous
        if ( $currentUser == false )
        {
            print( "no user found" );
            $currentUser = eZUserType::fetch( EZ_USER_ANONYMOUS_ID );
        }

        return $currentUser;
    }
}

?>
