    /*!
     \static
     Finds all classes that the current user can create objects from and returns.
<START:code-template::group-filter>
     It is also possible to filter the list event more with \a $includeFilter and \a $groupList.
<END:code-template::group-filter>

<START:code-template::object-creation>
     \param $asObject If \c true then it return eZContentClass objects, if not it will
                      be an associative array with \c name and \c id keys.
<END:code-template::object-creation>
<START:code-template::group-filter>
     \param $includeFilter If \c true then it will include only from class groups defined in
                           \a $groupList, if not it will exclude those groups.
     \param $groupList An array with class group IDs that should be used in filtering, use
                       \c false if you do not wish to filter at all.
     \param $id A unique name for the current fetch, this must be supplied when filtering is
                used if you want caching to work.
<END:code-template::group-filter>
    */
    function /*START:code-template::name-create*/&canCreateClassList/*END:code-template::name-create*/
/*START:code-template::name-instantiate*/&canInstantiateClassList/*END:code-template::name-instantiate*/
( /*START:code-template::object-creation*/$asObject = false/*END:code-template::object-creation*/
/*START:code-template::object-creation&group-filter*/, /*END:code-template::object-creation&group-filter*/
/*START:code-template::group-filter*/$includeFilter = true, $groupList = false, $fetchID = false/*END:code-template::group-filter*/ )
    {
        $ini =& eZINI::instance();
        $groupArray = array();
/*START:code-template::role-caching*/

        $enableCaching = ( $ini->variable( 'RoleSettings', 'EnableCaching' ) == 'true' );
        if ( is_array( $groupList ) )
        {
            if ( $fetchID == false )
                $enableCaching = false;
        }

        if ( $enableCaching )
        {
            $http =& eZHTTPTool::instance();
            //$permissionExpired = $http->sessionVariable( 'roleExpired' );
            include_once( 'lib/ezutils/classes/ezexpiryhandler.php' );
            $handler =& eZExpiryHandler::instance();
            $expiredTimeStamp = 0;
            if ( $handler->hasTimestamp( 'user-class-cache' ) )
                $expiredTimeStamp = $handler->timestamp( 'user-class-cache' );
//             print( "expired time stamp = '$expiredTimeStamp'<br/>" );

            $classesCachedForUser = $http->sessionVariable( 'ClassesCachedForUser' );
            $classesCachedTimestamp = $http->sessionVariable( 'ClassesCachedTimestamp' );

//             print( "\$classesCachedForUser='$classesCachedForUser'<br/>" );
//             print( "\$classesCachedTimestamp='$classesCachedTimestamp'<br/>" );

            $cacheVar = 'CanInstantiateClassList';
            if ( is_array( $groupList ) and $fetchID !== false )
            {
                $cacheVar = 'CanInstantiateClassListGroup';
            }
//             print( "\$cacheVar='$cacheVar'<br/>" );

            $user =& eZUser::currentUser();
            $userID = $user->id();
//             print( "\$userID='$userID'<br/>" );
            if ( ( $classesCachedTimestamp >= $expiredTimeStamp ) && $classesCachedForUser == $userID )
            {
                if ( $http->hasSessionVariable( $cacheVar ) )
                {
                    if ( $fetchID !== false )
                    {
                        // Check if the group contains our ID, if not we need to fetch from DB
                        $groupArray = $http->sessionVariable( $cacheVar );
                        if ( isset( $groupArray[$fetchID] ) )
                        {
//                             print( "returning cached class list in group<br/>" );
                            return $groupArray[$fetchID];
                        }
                    }
                    else
                    {
//                         print( "returning cached class list<br/>" );
                        return $http->sessionVariable( $cacheVar );
                    }
                }
            }
            else
            {
                $http->setSessionVariable( 'ClassesCachedForUser' , $userID );
                $http->setSessionVariable( 'ClassesCachedTimestamp', mktime() );
            }
        }

/*END:code-template::role-caching*/
        $languageCodeList = eZContentLanguage::fetchLocaleList();
        $allowedLanguages = array( '*' => array() );

        $user =& eZUser::currentUser();
        $accessResult = $user->hasAccessTo( 'content' , 'create' );
        $accessWord = $accessResult['accessWord'];

        $classIDArray = array();
        $classList = array();
        $fetchAll = false;
        if ( $accessWord == 'yes' )
        {
            $fetchAll = true;
            $allowedLanguages['*'] = $languageCodeList;
        }
        else if ( $accessWord == 'no' )
        {
            // Cannnot create any objects, return empty list.
            return $classList;
        }
        else
        {
            $policies  =& $accessResult['policies'];
            foreach ( $policies as $policyKey => $policy )
            {
/*START:code-template::class-policy-list*/
                $classIDArrayPart = '*';
                if ( isset( $policy['Class'] ) )
                {
                    $classIDArrayPart = $policy['Class'];
                }
                $languageCodeArrayPart = $languageCodeList;
                if ( isset( $policy['Language'] ) )
                {
                    $languageCodeArrayPart = array_intersect( $policy['Language'], $languageCodeList );
                }

/*END:code-template::class-policy-list*/
/*START:code-template::object-policy-list*/
                $policyArray = $this->classListFromPolicy( $policy, $languageCodeList );
                $classIDArrayPart = $policyArray['classes'];
                $languageCodeArrayPart = $policyArray['language_codes'];
/*END:code-template::object-policy-list*/
                if ( $classIDArrayPart == '*' )
                {
                    $fetchAll = true;
                    $allowedLanguages['*'] = array_unique( array_merge( $allowedLanguages['*'], $languageCodeArrayPart ) );
                }
                else
                {
                    foreach( $classIDArrayPart as $class )
                    {
                        if ( isset( $allowedLanguages[$class] ) )
                        {
                            $allowedLanguages[$class] = array_unique( array_merge( $allowedLanguages[$class], $languageCodeArrayPart ) );
                        }
                        else
                        {
                            $allowedLanguages[$class] = $languageCodeArrayPart;
                        }
                    }
                    $classIDArray = array_merge( $classIDArray, array_diff( $classIDArrayPart, $classIDArray ) );
                }
            }
        }

        $filterTableSQL = '';
        $filterSQL = '';
        // Create extra SQL statements for the class group filters.
        if ( is_array( $groupList ) )
        {
            $filterTableSQL = ', ezcontentclass_classgroup ccg';
            $filterSQL = ( " AND\n" .
                           "      cc.id = ccg.contentclass_id AND\n" .
                           "      ccg.group_id " );
            $groupText = implode( ', ', $groupList );
            if ( $includeFilter )
                $filterSQL .= "IN ( $groupText )";
            else
                $filterSQL .= "NOT IN ( $groupText )";
        }

        if ( $fetchAll )
        {
            $classList = array();
            $db =& eZDb::instance();
            $classString = implode( ',', $classIDArray );
/*START:code-template::no-object-creation*/
            // Since we do not create objects we only fetch the ID and Name
            $rows = $db->arrayQuery( "SELECT DISTINCT cc.id, cc.name\n" .
                                     "FROM ezcontentclass cc$filterTableSQL\n" .
                                     "WHERE cc.version = " . EZ_CLASS_VERSION_STATUS_DEFINED . "$filterSQL\n" .
                                     "ORDER BY cc.name ASC" );
            $classList =& $rows;
/*END:code-template::no-object-creation*/
/*START:code-template::object-creation*/
            // If $asObject is true we fetch all fields in class
            $fields = $asObject ? "cc.*" : "cc.id, cc.name";
            $rows = $db->arrayQuery( "SELECT DISTINCT $fields\n" .
                                     "FROM ezcontentclass cc$filterTableSQL\n" .
                                     "WHERE cc.version = " . EZ_CLASS_VERSION_STATUS_DEFINED . "$filterSQL\n" .
                                     "ORDER BY cc.name ASC" );
            $classList = eZPersistentObject::handleRows( $rows, 'ezcontentclass', $asObject );
/*END:code-template::object-creation*/
        }
        else
        {
            // If the constrained class list is empty we are not allowed to create any class
            if ( count( $classIDArray ) == 0 )
            {
                $classList = array();
                return $classList;
            }

            $classList = array();
            $db =& eZDb::instance();
            $classString = implode( ',', $classIDArray );
/*START:code-template::no-object-creation*/
            // Since we do not create objects we only fetch the ID and Name
            $rows = $db->arrayQuery( "SELECT DISTINCT cc.id, cc.name\n" .
                                     "FROM ezcontentclass cc$filterTableSQL\n" .
                                     "WHERE cc.id IN ( $classString  ) AND\n" .
                                     "      cc.version = " . EZ_CLASS_VERSION_STATUS_DEFINED . "$filterSQL\n",
                                     "ORDER BY cc.name ASC" );
            $classList =& $rows;
/*END:code-template::no-object-creation*/
/*START:code-template::object-creation*/
            // If $asObject is true we fetch all fields in class
            $fields = $asObject ? "cc.*" : "cc.id, cc.name";
            $rows = $db->arrayQuery( "SELECT DISTINCT $fields\n" .
                                     "FROM ezcontentclass cc$filterTableSQL\n" .
                                     "WHERE cc.id IN ( $classString  ) AND\n" .
                                     "      cc.version = " . EZ_CLASS_VERSION_STATUS_DEFINED . "$filterSQL\n",
                                     "ORDER BY cc.name ASC" );
            $classList = eZPersistentObject::handleRows( $rows, 'ezcontentclass', $asObject );
/*END:code-template::object-creation*/
        }

/*START:code-template::object-creation*/
        if ( $asObject )
        {
        foreach ( $classList as $key => $class )
        {
            $id = $class->attribute( 'id' );
            if ( isset( $allowedLanguages[$id] ) )
            {
                $languageCodes = array_unique( array_merge( $allowedLanguages['*'], $allowedLanguages[$id] ) );
            }
            else
            {
                $languageCodes = $allowedLanguages['*'];
            }
            $classList[$key]->setCanInstantiateLanguages( $languageCodes );
        }
        }
/*END:code-template::object-creation*/

        eZDebugSetting::writeDebug( 'kernel-content-class', $classList, "class list fetched from db" );
/*START:code-template::role-caching*/
        if ( $enableCaching )
        {
            if ( $fetchID !== false )
            {
                $groupArray[$fetchID] = $classList;
                $http->setSessionVariable( $cacheVar, $groupArray );
            }
            else
            {
                $http->setSessionVariable( $cacheVar, $classList );
            }
        }

/*END:code-template::role-caching*/
        return $classList;
    }
