#!/usr/bin/perl
# 
# $Id: ezphpdoc.pl,v 1.6 2001/06/28 12:33:49 bf-cvs Exp $
#
# A script for parsing php classes 
# and for making html documentation from it.
#
# Copyright (c) 2000 - eZ systems as
# 
# Created on: <04-Sep-2000 20:43:04 bf>
# Author: Bård Farstad - <bf@ez.no>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#


use Fcntl;
use File::Find;
use File::Path;
use File::Basename;
use File::Copy;
use Getopt::Std;
use Cwd; 

$prevArg = "";
$outputDir = "";
@searchPath = ();
$disableTodo = "";
foreach $item ( @ARGV )
{
    if ( $prevArg eq "-o" )
    {
	$outputDir = $item;
    }
    else
    {
	if ( $item =~ /^\-/ )
	{
	}
	else
	{
	    push( @searchPath, $item );
	}
    }
    if ( $item eq "--disable_todo" )
    {
	$disableTodo = "true";
    }

    $prevArg = $item;
}


if ( $outputDir eq "" )
{
    $outputDir =  "/doc/";
}

$outputDir = getcwd ."/" . $outputDir;

#  print "output dir: " . $outputDir . "\n";

#  foreach $item ( @searchPath )
#  {
#      print "parameter:" . $item . "\n";    
#  }




$VERSION = "1.1";
$CURRENT_DATE=localtime();
$DEST_DIR = $outputDir . "/";
@SEARCH_PATH = @searchPath;

# eZ publish compatible:
$suffix = "";

if ( ( ( scalar @searchPath )  == 0 ) ||  ( $outputDir eq "" ) )
{
    print "eZ phpdoc v" . $VERSION . "\n"
	. "    Usage: phpdoc.pl sourcedir... -o outputdir\n"
	. "           --disable_todo ( will remove the todo listing )\n" 
	. "    Notice: phpdoc will search the sourcedir recursively and use all .php files containing a class definition.\n";
    exit;   
}


print $DEST_DIR . "\n";

# Ok, this is not so nice. But it's easier for the user to have just one file :)
# This is the reason for not including this html.

#
# HTML - HEADER/FOOTER
#

if ( $disableTodo eq "true" )
{
    $todoString = "";
}
else
{
    $todoString = "<a class=\"doclink\" href=\"todo". $suffix . "\"><span class=\"white\">TODO list</span></a><span class=\"white\"> | </span>";
}


# eZ publish compatible
$PAGE_HEADER_HTML = "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"5\">
";

$PAGE_FOOTER_HTML = "</table>\n";


#
# LaTeX - HEADER / FOOTER
#

$PAGE_HEADER_LATEX = "#Phpdoc.pl $VERSION created this file. For more info see http://phpdoc.zez.org/
\\lyxformat 2.16
\\textclass article
\\language default
\\inputencoding latin1
\\fontscheme default
\\graphics default
\\paperfontsize default
\\spacing single 
\\papersize Default
\\paperpackage widemarginsa4
\\use_geometry 0
\\use_amsmath 0
\\paperorientation portrait
\\secnumdepth 5
\\tocdepth 3
\\paragraph_separation skip
\\defskip medskip
\\quotes_language english
\\quotes_times 2
\\papercolumns 1
\\papersides 1
\\paperpagestyle default

\\layout Title

{title}
\\layout Author

{author}
\\layout Standard


\\begin_inset LatexCommand \\tableofcontents{}

\\end_inset 

\\layout Section

Class listing

";

$PAGE_FOOTER_LATEX = "\\the_end";

#
#
# Man page - HEADER / FOOTER
#

$PAGE_HEADER_MAN = ".TH {title}  \\\" -*- nroff -*-\n"
    . ".\" Generated by phpdoc.pl version $VERSION\n"
    . ".\\\"\n"
    . ".ad l\n"
    . ".nh\n";


$PAGE_FOOTER_MAN = ".SH \"SEE ALSO\"\n" 
    . ".BR http://developer.ez.no/\n"
    . ".SH COPYRIGHT\n"
    . "eZ systems as 2000\n"
    . ".SH AUTHOR\n"
    . "phpdoc.pl version $VERSION\n";


# create the dest dir
mkpath( $DEST_DIR );
mkpath( $DEST_DIR . "/html/" );
mkpath( $DEST_DIR . "/man/man3/" );
mkpath( $DEST_DIR . "/latex/" );

print( "PHP documentation tool version: " . $VERSION . "\n" );

open( INDEX_FILE_HTML, ">" . $DEST_DIR . "/html/index". $suffix . "" ) 
    or die "Error opening index". $suffix . " for write: $!";

open( ANNOTATED_FILE_HTML, ">" . $DEST_DIR . "/html/annotated". $suffix . "" ) 
    or die "Error opening annotated". $suffix . " for write: $!";

open( FUNCTION_FILE_HTML, ">" . $DEST_DIR . "/html/function". $suffix . "" ) 
    or die "Error opening function". $suffix . " for write: $!";


open( STRUCTURE_FILE_HTML, ">" . $DEST_DIR . "/html/structure". $suffix . "" ) 
    or die "Error opening structure". $suffix . " for write: $!";

open( TODO_FILE_HTML, ">" . $DEST_DIR . "/html/todo". $suffix . "" ) 
    or die "Error opening todo". $suffix . " for write: $!";

open( LATEX_FILE, ">" . $DEST_DIR . "/latex/phpdoc.lyx" );


$header = $PAGE_HEADER_HTML;
$header =~ s/\{page_title\}/Class Index/;

print INDEX_FILE_HTML $header;

$header = $PAGE_HEADER_HTML;
$header =~ s/\{page_title\}/Annotated Class Index/;

print ANNOTATED_FILE_HTML $header;

$header = $PAGE_HEADER_HTML;
$header =~ s/\{page_title\}/Function Listing/;

print FUNCTION_FILE_HTML $header;

$header = $PAGE_HEADER_HTML;
$header =~ s/\{page_title\}/Structured Class Listing/;

print STRUCTURE_FILE_HTML $header;

$header = $PAGE_HEADER_HTML;
$header =~ s/\{page_title\}/TODO Listing/;

print TODO_FILE_HTML $header;

$header = $PAGE_HEADER_LATEX;
$header =~ s/\{title\}/Structured Class Listing/;
$header =~ s/\{author\}/Generated By phpdoc.pl version $VERSION/;

print LATEX_FILE $header;

# class array's and index.
@ClassList = ();


##
## Parse the path's given as input.
##

find( \&ParseFile, @SEARCH_PATH );

@sortedClassList = sort { $a->[0] cmp $b->[0] } @ClassList;

#
# Print out the html class files
#
print "Generating html documentation\n";
foreach $class ( @sortedClassList )
{
	{
	    # push class values
	    {
		# make more than two \n into a paragraph
#		$classDescription =~ s/[\n]{2,}/\<p\>\n/g;

		# code
		$classDescription = $class->[4];

		$classDescription =~ s/(\\code[^\\]+)/\<p\>{code}\<\/p\>/;

		$code = $1;
		{
		    $code =~ s/\</\&lt;/g;
		    $code =~ s/\>/\&gt;/g;

		    # make some indenting
  		    $code =~ s/\n/\<br\>\n/g;

		    $code =~ s/^\s+/'&nbsp;' x length($&)/mge;

		    $code =~ s/([(){}+-])/\<b\>$1\<\/b\>/g;

		    $code =~ s/(\"[^\"]+\")/\<font color=\"green\"\>$1\<\/font\>/g;

		    $code =~ s/( [0-9]+)/\<font color=\"red\"\>$1\<\/font\>/g;

		    $code =~ s/(\$[a-zA-Z0-9]+)/\<font color=\"blue\"\>$1\<\/font\>/g;

		    $code =~ s/(\/\/.*)/\<font color=\"orange\"\>$1\<\/font\>/g;
		}
		
                # see also
		$classDescription =~ s/(\\sa)(.+)/\<p\>See also: {see_also}\<\/p\>/g;

		$tmpSA = $2;
		$tmpSA =~ s/(\w+)/\<a class=\"doclink\" href="\L$1\E". $suffix . ""\>$1\<\/a\> /g;

		# Make some paragraphs, breaks up one or more empty lines to a <p>
		$classDescription =~ s/(\n[\s]{0,}){2,}/\<br\>\<br\>$1/g;
		
		$classDescription =~ s/\{code\}/$code/;

		$classDescription =~ s/\\code//g;
		$classDescription =~ s/\\endcode//g;

		$classDescription =~ s/\{see_also\}/$tmpSA/g;

		$classDescription =~ s/(\\sa) (.+)/\<b\>$1 $2\<\/b\>/g;		

	    }

	    open( CLASS_FILE_HTML, ">" . $DEST_DIR . "/html/" . $class->[1] . "". $suffix . "") 
		or die "Error opening index". $suffix . " for write: $!";

	    $header = $PAGE_HEADER_HTML;
	    $header =~ s/\{page_title\}/$class->[0] Class Reference/;
	    print CLASS_FILE_HTML $header;

	    print CLASS_FILE_HTML "<tr><td><center><h1 class=\"ezdoc\">". 
		$class->[2] . "::" . $class->[0] . " class reference</h1></center></td></tr>";


	    if ( !( $class->[9] eq "" ) )
	    {
		$inhertisFile = $class->[9];
		$inhertisFile = lc $inhertisFile;

		print CLASS_FILE_HTML "<tr><td>Inherits: <b><a class=\"ezdoc\" href=\"" . $inhertisFile . "". $suffix . "\">". 
		    $class->[9] . "</a></b></td></tr>";
	    }


	    print CLASS_FILE_HTML "<tr><td>". 
		$class->[3] . " <a class=\"ezdoc\" href=\"#999999\">[more]</a></td></tr>";

	    print CLASS_FILE_HTML "<tr><td>". 
		 "The source file: <a class=\"ezdoc\" href=\"" . $class->[1] . ".src". $suffix . "\">[view the source]</a></td></tr>";


	    $functionArray = $class->[5];
	    $varArray = $class->[7];
	    

	    # print the function index
	    {
		print CLASS_FILE_HTML "<tr><td><h2 class=\"ezdoc\">Member Functions</h2>" .
		    "<ul>";

		foreach $func ( @$functionArray )
		{
		    $functionName = $func->[0];

  		    @name = split /\(/, $functionName;

		    print CLASS_FILE_HTML "<li class=\"ezdoc\"><a class=\"ezdoc\" href=\"#" . $func->[3] . "\">". 
			@name[0] . "</a>( " . @name[1] . "</li>";
		    
		}		

		print CLASS_FILE_HTML "</tr></td></ul>";
	    }

	    # print the member variables
	    {
		print CLASS_FILE_HTML "<tr><td><h2 class=\"ezdoc\">Member Variables</h2>" .
		    "<ul>";

		foreach $var ( @$varArray )
		{
		    $varName = $var->[0];

		    if ( $var->[1] eq "" )
		    {
			print CLASS_FILE_HTML "<li>" . 
			    $varName . "</li>";
		    }
		    else
		    {
			print CLASS_FILE_HTML "<li>" . 
			    $varName . " - ". $var->[1] . "</li>";
		    }
		}		

		print CLASS_FILE_HTML "</tr></td></ul>";
	    }


	    # print class description
	    print CLASS_FILE_HTML "<tr><td><hr class=\"ezdoc\">" . 
		"<a name=\"999999\"></a><h2 class=\"ezdoc\">Detailed Description</h2></td></tr>";

	    print CLASS_FILE_HTML "<tr><td class=\"classDescription\">" 
		. $classDescription . "</td></tr>";


	    # print the TODO
	    $todo = $class->[10]; 
     	    if ( !($todo eq "" ) )
	    {
		print CLASS_FILE_HTML "<tr><td><hr noshade size=\"2\"></td></tr><tr><td class=\"classTODO\"><h2>TODO</h2></td></tr>\n";
		
		$todo = $class->[10]; 

		$todo =~ s/(\n[\s]{0,}){2,}/\<li\>$1/g;
		
		print CLASS_FILE_HTML  "<tr><td class=\"classTODO\"><ul><li>" . $todo . "</ul></td></tr>\n";
	    }

	    # print member function documentation
	    print CLASS_FILE_HTML "<tr><td><hr noshade size=\"2\">" . 
		"<h2>Member Function Documentation</h2></td></tr>";


	    $sourceFileName = $class->[1] . ".src". $suffix . "";

	    $i=0;
	    foreach $func ( @$functionArray )
	    {
		if ( ( $i % 2 ) == 0 )
		{
		    $tdClass = "bgdark";
		}
		else
		{
		    $tdClass = "bglight";
		}

		$functionDescription = $func->[2];
		$scope = "";
		if ( $functionDescription =~ /\\private/ )
		{
		    $functionDescription =~ s/\\private//g;
		    $scope = "private";
		}
		else
		{
		    $functionDescription =~ s/\\public//g;
		    $scope = "public";
		}

		$static = "";
		if ( $functionDescription =~ /\\static/ )
		{
		    $functionDescription =~ s/\\static//g;
		    $static = " [static] ";
		}

	    	print CLASS_FILE_HTML "<tr><td class=\"" . $tdClass . "\"><a name=\"" . $func->[3] . "\"></a><p class=\"functionName\">". 
 		    $class->[0] . "::<b>"  . $func->[0] . "</b> [" . $scope . "]" . $static . " <a class=\"doclink\" href=\"" . $sourceFileName ."#" . $i . "\">[ source ]</a></p></td></tr>";	

		# remove leading whitespace 
		$functionDescription =~ s/^\s+//g;



		# Make some paragraphs, breaks up one or more empty lines to a <p>
		$functionDescription =~ s/(\n[\s]{0,}){2,}/\<br\>\<br\>$1/g;

#          \variables
#          \in
#              \$inOrderBy  This is the columnname to order the returned array
#                          by.
#              \accepts
#                  ID - The id of the row in the table
#                  Name - Name of item
#                  CreatedAt - SQL timestamp
#                  CreatedBy - eZUser.ID
#                  CreationIP - ip / port
#                  Status  - eZNews_ChangeType.ID
#                  \default is ID
#              \$direction  This is the direction to do the ordering in
#              \accepts
#                  asc - ascending order
#                  desc - descending order
#                  \default is asc
#              \$startAt   This is the result number we want to start at
#                  \default is 0
#              \$noOfResults This is the number of results we want.
#                  \default is all
#          \out
#              \$returnArray    This is the array of found elements
#          \return
#              Returns false if it fails, the error message from SQL is
#              retained in $this->SQLErrors. Use getSQLErrors() to read
#              the error message.

#  		$functionDescription =~ s/(\\\$[^\\]+) /\<b\>$1\<\/b\>/g;

#  		$functionDescription =~ s/(\\in.*?)(\\out|\\return|$)/\<b\>$1\<\/b\>$2/sg;
#  		$functionDescription =~ s/(\\out.*?)(\\return|$)/\<i\>$1\<\/i\>$2/sg;
#  		$functionDescription =~ s/(\\return.*?)($)/\<u\>$1\<\/u\>$2/sg;
		

		$functionDescription =~ s/(\\in.*?)(\\out|\\return|$)/{in}$2/sg;
                $in = $1;
                {
		    $in =~ s/\\in//g;

		    $in =~ s/^\s+//g;
		    
		    # Spilt each variable up.
		    @variables = split( /\\\$/, $in );

		    $in = "";
		    $j = 0;
		    foreach $variable ( @variables )
		    {
			if ( $j ) # hack for poor split knowledge :)
			{
			    $variable =~ s/\\accepts([^\\]*)//g;
			    $accepts = $1;

			    $accepts =~ s/^\s+//gm;

			    $accepts =~ s/$/\<br\>/gm;

			    $variable =~ s/\\default([^\\]*)//g;
			    $default = $1;
			    
			    $variable =~ s/^(\S+)/\<b\>\$$1\<\/b\>/g;

			    $variable = "<b>" . $name . "</b>". $variable . "<blockquote>";

			    if ( !( $accepts eq "" ) )
			    {
				$variable .= "Accepts: <blockquote>" . $accepts . "</blockquote>";
			    }

			    if ( !( $default eq "" ) )
			    {
				$variable .= "Default: <blockquote>" . $default . "</blockquote></blockquote>";
			    }

			    $in .= $variable;
			}
			$j++;
		    }

		}				    

		$functionDescription =~ s/(\\out.*?)(\\return|$)/\{out}$2/sg;
                {
		    $out = $1;

		    $out =~ s/\\out//g;

		    $out =~ s/^\s+//g;
		    
		    # Spilt each variable up.
		    @variables = split( /\\\$/, $out );

		    $out = "";
		    $j = 0;
		    foreach $variable ( @variables )
		    {
			if ( $j ) # hack for poor split knowledge :)
			{
			    $variable =~ s/\\accepts([^\\]*)//g;
			    $accepts = $1;

			    $accepts =~ s/^\s+//gm;

			    $accepts =~ s/$/\<br\>/gm;

			    $variable =~ s/\\default([^\\]*)//g;
			    $default = $1;
			    
			    $variable =~ s/^(\S+)/\<b\>\$$1\<\/b\>/g;

			    $variable = "<b>" . $name . "</b>". $variable . "<blockquote>";

			    if ( !( $accepts eq "" ) )
			    {
				$variable .= "Accepts: <blockquote>" . $accepts . "</blockquote>";
			    }

			    if ( !( $default eq "" ) )
			    {
				$variable .= "Default: <blockquote>" . $default . "</blockquote></blockquote>";
			    }

			    $out .= $variable;
			}
			$j++;
		    }


#  		    # Get the variable name and short description.
#  		    $out =~ s/\\(\$\S+)([^\\]+)/\<br\>\<b\>$1\<\/b\> - $2\<br\>/gs;  

#  		    # Get the accepts values
#  		    $out =~ s/\\accepts([^\\]*)/\<blockquote\>\Accepts: \<blockquote\>{accepts} \<\/blockquote\>\<\/blockquote\>/gs;

#  		    $accepts = $1;

#  		    # remove leading whitespace
#  		    $accepts =~ s/^\s+//mg;

#  		    $accepts =~ s/^([^\-]+)/\<b\>$1\<\/b\>/gm;

#  		    $accepts =~ s/$/\<br\>/gm;  

#  		    $out =~ s/\{accepts\}/$accepts/g;

#  		    # Get the default values
#    		    $out =~ s/\\default (.+)/\<blockquote\>Default: $1\<\/blockquote\>\n/gm;

		}


		$functionDescription =~ s/(\\return.*?)($)/{return}$2/sg;
                {
		    $return = $1;

		    $return =~ s/\\return//g;

		    # Get the variable name and short description.
		    $return =~ s/\\(\$\S+)([^\\]+)/\<br\>\<b\>$1\<\/b\> - $2\<br\>/gs;  

		    # Get the accepts values
		    $return =~ s/\\accepts([^\\]*)/\<blockquote\>\Accepts: \<blockquote\>{accepts} \<\/blockquote\>\<\/blockquote\>/gs;

		    $accepts = $1;

		    # remove leading whitespace
		    $accepts =~ s/^\s+//mg;

		    $accepts =~ s/^([^\-]+)/\<b\>$1\<\/b\>/gm;

		    $accepts =~ s/$/\<br\>/gm;  

		    $return =~ s/\{accepts\}/$accepts/g;

		    # Get the default values
  		    $return =~ s/\\default (.+)/\<blockquote\>Default: $1\<\/blockquote\>\n/gm;


		}
							
		$functionDescription =~ s/\{in\}/\<b\>In:\<\/b\>\<blockquote\>$in\<\/blockquote\>/;
  		$functionDescription =~ s/\{out\}/\<b\>Out:\<\/b\>\<blockquote\>$out\<\/blockquote\>/;
  		$functionDescription =~ s/\{return\}/\<b\>Return:\<\/b\>\<blockquote\>$return\<\/blockquote\>/;
		
 		print CLASS_FILE_HTML "<tr><td class=\"" . $tdClass . "\"><blockquote>". 
 		    $functionDescription . "</blockquote></td></tr>";

		$i++;
	    }

	    print CLASS_FILE_HTML $PAGE_FOOTER_HTML;			
	    close CLASS_FILE_HTML;

	    #
	    # source listing
	    #

	    open( SOURCE_FILE_HTML, ">" . $DEST_DIR . "/html/" . $class->[1] . ".src". $suffix . "") 
		or die "Error opening sourcefile.src". $suffix . " for write: $!";
	    $header = $PAGE_HEADER_HTML;

	    $header =~ s/\{page_title\}/$class->[0] Source Listing/;

	    print SOURCE_FILE_HTML $header;
	    
	    $source = $class->[6];


	    # fontifying the source
  	    $source =~ s/\</\&lt;/g;
  	    $source =~ s/\>/\&gt;/g;


	    $source =~ s/(\"[^\"]{0,}\")/\<span class=\"string\"\>$1\<\/span\>/g;
	    $source =~ s/( [0-9]+)/\<span class=\"number\"\>$1\<\/span\>/g;


	    $source =~ s/([(){}+-])/\<span class\=\"specialChar\"\>$1\<\/span\>/g;
	    $source =~ s/function/\<span class\=\"reservedWord\"\>function\<\/span\>/g;
	    $source =~ s/class /\<span class\=\"reservedWord\"\>class \<\/span\>/g;
	    $source =~ s/var /\<span class\=\"reservedWord\"\>var \<\/span\>/g;
	    $source =~ s/(\$[a-zA-Z0-9]+)/\<span class\=\"variable\"\>$1\<\/span\>/g;
	    $source =~ s/(\/\/.*\n)/\<span class\=\"comment\"\>$1\<\/span\>/g;
	    $source =~ s/(\/\*[^*]*\*\/)/\<span class\=\"comment\"\>$1\<\/span\>/g;

	    $i=0;
	    foreach $func ( @$functionArray )
	    {
		$functionName = $func->[0];

		$functionName =~ s/([^(]+).+/$1/g;

  		$source =~ s/function<\/span> ($functionName)/function <a class=\"doclink\" href=\"\" name=\"$i\"><\/a>$1/g;
		$i++;
	    }
	    


	    # breake up the lines

	    $source =~ s/(\n)/\<br\>$1/g;

	    # let's have some space
#  	    $source =~ s/\s/\&nbsp\;/g;
	    $source =~ s/^\s+/'&nbsp;' x length($&)/mge;


	    print SOURCE_FILE_HTML "<tr><td class=\"sourceListing\">" . $source . "</tr></td>";

	    print SOURCE_FILE_HTML $PAGE_FOOTER_HTML;			
	    close SOURCE_FILE_HTML;
	}
}


#
# Print out indeces
#

## class list
print INDEX_FILE_HTML "<tr><td><table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\"><tr>";


$count = @sortedClassList;

$offs = ( $count / 4 ) +1;

#$offs = ( ( $count - ( $count % 4 ) ) / 4 ) + 1;

$offs = int ( $offs + 0.5 );

if ( $count < 5 ) 
{
    $offs = 1;
}

for ( $i=0; $i<($count/4); $i++ )
#  foreach $class ( @sortedClassList )
{
    if ( ( $i %2 ) == 0 )
    {
	$cssClass = "classLinkLight";
    }
    else
    {
	$cssClass = "classLinkDark";
    }
    
    print INDEX_FILE_HTML "<td class=\"$cssClass\"><a class=\"doclink\" href=\"" . @sortedClassList[$i]->[1] . "". $suffix . "\">" 
	. @sortedClassList[$i]->[0] . "</a></td>\n";


    if  ( $count > 1 )
    {
	print INDEX_FILE_HTML "<td class=\"$cssClass\"><a class=\"doclink\" href=\"" . @sortedClassList[$i + ( $offs )]->[1] . "". $suffix . "\">" 
	    . @sortedClassList[$i + ( $offs )]->[0] . "</a></td>\n";
    }

    if ( ( $i + ( $offs * 2 ) ) < ($count) )
    {
	print INDEX_FILE_HTML "<td class=\"$cssClass\"><a class=\"doclink\" href=\"" . @sortedClassList[$i + ( $offs * 2 )]->[1] . "". $suffix . "\">" 
	    . @sortedClassList[$i + ( $offs * 2 )]->[0] . "</a></td>\n";
    }

    if ( ( $i + ( $offs * 3 ) ) < ($count) )
    {
	print INDEX_FILE_HTML "<td class=\"$cssClass\"><a class=\"doclink\" href=\"" . @sortedClassList[$i + ( $offs * 3 )]->[1] . "". $suffix . "\">" 
	    . @sortedClassList[$i + ( $offs * 3 )]->[0] . "</a></td>\n";
    }
    else
    {
       print INDEX_FILE_HTML "<td class=\"$cssClass\">&nbsp;</td>\n";
    }

    {
	print INDEX_FILE_HTML "</tr><tr>";
    }
}
print INDEX_FILE_HTML "</tr></table></td></tr>";

## annotated class list
$i=0;
foreach $class ( @sortedClassList )
{
    if ( ( $i %2 ) == 0 )
    {
	$cssClass = "classLinkLight";
    }
    else
    {
	$cssClass = "classLinkDark";
    }

    print ANNOTATED_FILE_HTML "<tr><td class=\"$cssClass\"><a class=\"doclink\" href=\"" . $class->[1] . "". $suffix . "\">" 
	. $class->[0] . "</a>"  . $class->[3] ."</td></tr>\n";
    
    $i++;
}

@packageList = ();
%seen = ();

# get the unique packages into packagelist.
foreach $item ( @sortedClassList ) 
{
    push( @packageList, $item->[2] ) unless $seen{$item->[2]}++;
}

@packageList = sort @packageList;

# print out all the classes sorted by package

foreach $item ( @packageList )
{
    print STRUCTURE_FILE_HTML "<tr><td class=\"tableHeader\"><center><b>" 
	. $item . "</b></center></a></td></tr>\n";

    foreach $class ( @sortedClassList )
    {
	if ( $item eq $class->[2] )
	{
	    print STRUCTURE_FILE_HTML "<tr><td class=\"bglight\"><a class=\"doclink\" href=\"" . $class->[1] . "". $suffix . "\">" 
		 .  $class->[0] . "</a>" . $class->[3]  ."</td></tr>\n";
	}
    }
}


# function list

@functionList = ();
%seen = ();

foreach $class ( @sortedClassList )
{    
    $functionArray = $class->[5];



    foreach $func ( @$functionArray )
    {
	$functionName = $func->[0];
	$functionName =~ s/^&//g;
	$functionName =~ s/([^\(]+).+/$1/g;
	$functionName =~ s/\s+$//g;

	push( @functionList, $functionName ) unless $seen{$functionName}++;
    }

}

@functionList = sort @functionList;

foreach $function ( @functionList )
{
    @functionOccurance = ();
    foreach $class ( @sortedClassList )
    {    
	$functionArray = $class->[5];
	
	
	foreach $func ( @$functionArray )
	{
	    $functionName = $func->[0];
	    $functionName =~ s/^&//g;
	    $functionName =~ s/([^\(]+).+/$1/g;
	    $functionName =~ s/\s+$//g;
	    
	    if ( $functionName eq $function )
	    {
		my @functionValues = ( $class->[1], $func->[3], $class->[0] );
		push( @functionOccurance, \@functionValues );
	    }
	}

    }

    print FUNCTION_FILE_HTML "<tr><td class=\"$cssClass\">" .
	$function . " - ";

    foreach $occurance ( @functionOccurance )
    {    
	print FUNCTION_FILE_HTML "<a class=\"doclink\" href=\"" . $occurance->[0] . "". $suffix . "" . "#" . $occurance->[1] ."\">" . $occurance->[2] . "</a> ";
    }

    print FUNCTION_FILE_HTML "</td></tr>\n";
}



# TODO index
foreach $class ( @sortedClassList )
{    
    if ( !($class->[10] eq "" ) )
    {
	print TODO_FILE_HTML "<tr><td class=\"tableHeader\"><a class=\"doclink\" href=\"" . $class->[1] . "". $suffix . "\">" . $class->[0]. "</a></td></tr>\n";

	$todo = $class->[10]; 
	$todo =~ s/(\n[\s]{0,}){2,}/\<li\>$1/g;
	
	print TODO_FILE_HTML "<tr><td class=\"$cssClass\"><ul><li>"
	    .  $todo . "</ul></td></tr>\n";

    }

}


# 
# Print out LaTeX file.
# The document is sorted in packages/classes/functions
#

print "Generating LaTeX documentation\n";
foreach $item ( @packageList )
{
    print LATEX_FILE "\\layout Subsection\n\n" . $item . "\n";
    foreach $class ( @sortedClassList )
    {

	if ( $item eq $class->[2] )
	{
	    # a new subsection, a class
	    print LATEX_FILE "\\layout Subsubsection\n\n" . $class->[0] . " Class Reference" . "\n";
	    
	    print LATEX_FILE "\\layout Standard\n\n" . $class->[3] . "\n";
	    $description = $class->[4];

	    $description =~ s/\<p\>/\\layout Standard\n\n/g;
	    
	    print LATEX_FILE "\\layout Standard\n\n" . $description . "\n";
	    
	    $functionArray = $class->[5];

	    print LATEX_FILE "\\layout Subsubsubsection\n\n" . "Function Listing" . "\n";
	    
	    # print the member functions
	    foreach $func ( @$functionArray )
	    {
		print LATEX_FILE "\\layout Subsubsubsubsection\n\n" . $class->[0] . "::" . $func->[0] . "\n";
		
		print LATEX_FILE "\\layout Standard\n\n" . $func->[2] . "\n";
		
#  	print CLASS_FILE_HTML "<tr><td><a name=\"" . $func->[3] . "\"></a><p class=\"functionName\">". 
#  	    $class->[0] . "::"  . $func->[0] . "</p></td></tr>";		
		
#  	print CLASS_FILE_HTML "<tr><td><p class=\"functionDesc\">". 
#  	    $func->[2] . "</p></td></tr>";
	    }
	}
    }
}

#
# Print out man page files.
#
#
print "Generating MAN page documentation\n";
foreach $class ( @sortedClassList )
{
    open( CLASS_FILE_MAN, ">" . $DEST_DIR . "/man/man3/" . $class->[1] . ".3" ) 
	or die "Error opening " . $DEST_DIR . "/man/man3/" . $class->[1] . ".3 for write: $!";

    $header = $PAGE_HEADER_MAN;
    print CLASS_FILE_MAN $header;


    print CLASS_FILE_MAN ".SH NAME\n" . $class->[0] . "\n\-" . $class->[3] . "\n";

    print CLASS_FILE_MAN ".SH SYNOPSIS\n.br\n";

    $functionArray = $class->[5];
    
    print CLASS_FILE_MAN ".PP\n.SS \"Class Members\"\n.in +1c\n";

    # print the member functions for synopsis
    foreach $func ( @$functionArray )
    {
	print CLASS_FILE_MAN ".ti -1c\n.BI \"\\fB" . $func->[0] . "\\fR\n.br\n";

    }

    print CLASS_FILE_MAN ".SH DESCRIPTION\n";

    print CLASS_FILE_MAN $class->[3] . "\n.PP\n";
    print CLASS_FILE_MAN $class->[4] . "\n.PP\n";

    print CLASS_FILE_MAN ".SH MEMBER FUNCTION DOCUMENTATION\n";

    # print the member function documentation
    foreach $func ( @$functionArray )
    {
	print CLASS_FILE_MAN ".SH \"" . $func->[0] . "\"\n";
	print CLASS_FILE_MAN "" . $func->[2] . "\n";
    }


    print CLASS_FILE_MAN $PAGE_FOOTER_MAN;

    close( CLASS_FILE_MAN );
}


print INDEX_FILE_HTML $PAGE_FOOTER_HTML;
print STRUCTURE_FILE_HTML $PAGE_FOOTER_HTML;
print FUNCTION_FILE_HTML $PAGE_FOOTER_HTML;
print ANNOTATED_FILE_HTML $PAGE_FOOTER_HTML;
print TODO_FILE_HTML $PAGE_FOOTER_HTML;
print LATEX_FILE $PAGE_FOOTER_LATEX;

close INDEX_FILE_HTML;
close ANNOTATED_FILE_HTML;
close FUNCTION_FILE_HTML;
close STRUCTURE_FILE_HTML;
close TODO_FILE_HTML;
close LATEX_FILE;

#
# Parses the source tree and puts the contents into lists.
#
#
sub ParseFile
{
    $fileName = $_;
#    $baseDir = $File::Find::topdir;
    
    if ( ( $fileName =~ /\.php$/  ) && !( $fileName =~ /^\./  ))
    {
	print( "Processing: " . $fileName . "\n" );

	open ( IN, $_ ) or die "Can't open inputfile $file";

	# used to check if the .php file includes a class statement.
	$foundClass = 0;

	my $classPackage = "";
	my $className = "";
	my $classInheritance = "";
	my $classAbstract = "";
	my $classDescription = "";
	
	my $classVersion = "";


	my $functionCount = 0;
	
	my @FunctionList = ();

	my $varName;
	my $varDescription;

	my @VarList = ();

	my $todoItems = "";


	my $source = "";

	while ( <IN> )
	{
	    $source .= $_;

	    # the class version
	    if ( /\/\/ \$Id\:.+\$/ )
	    {
		$classVersion = $_;
		$classVersion =~ s/\/\/ //g;
		$classVersion =~ s/\$Id\: //g;
		$classVersion =~ s/\$//g;

#		print $classVersion;
	    }
    
	    # the class package
	    if ( /^\/\/\!\!/ .. /\n/ )
	    {
		$foundClass = 1;

		$classPackage = $_;
		$classPackage =~ s/\/\/\!\!//;
		$classPackage =~ s/\n//;
		$classPackage =~ s/\s//;
	    }

	    # the class abstract 
	    if ( /^\/\/\!/ .. /\n/ )
	    {
		$classAbstract = $_;
		$classAbstract =~ s/\/\/\!//;
		$classAbstract =~ s/\n//;
	    }

	    # the class description
	    if ( m/^\/\*\!\s/ .. m/\*\// )
	    {
		$tmpDesc = $_;
		$tmpDesc =~ s/\/\*\!//;
		$tmpDesc =~ s/\*\///;
#		$tmpDesc =~ s/^\s+//;

		$classDescription = $classDescription . $tmpDesc;
	    }

	    # the class todo
	    if ( m/^\/\*\!TODO/ .. m/\*\// )
	    {
		$tmpTodo = $_;
		$tmpTodo =~ s/\/\*\!TODO//;
		$tmpTodo =~ s/\*\///;

		$todoItems = $todoItems . $tmpTodo;
	    }

	    # we've found a class
	    if ( /^class/ .. /\n/ )
	    {
		$insideClass = 1;

		$functionCount = 0;

		$className = $_;
		$className =~ s/class\s+//;
		$className =~ s/\n//;
		$className =~ s/(.+) extends (.+)/$1/;

		$inherit = $_;
		/extends (.+)/;
		$classInheritance = $1;
		
		$functionAbstract = "";
		$functionDescription = "";
	    }
	    
	    # we've found a class, and are parsing it
	    if ( /^class/ .. /^\}/ )
	    {

		# a function with comments
		if ( /\/\*\!/ .. /\}/ )
		{
		    # a function description
		    if ( m/\/\*\!/ .. m/\*\// )
		    {
			$tmpDesc = $_;
			$tmpDesc =~ s/\/\*\!//;
			$tmpDesc =~ s/\*\///;
#  			$tmpDesc =~ s/^\s+//;

			$functionDescription = $functionDescription . $tmpDesc;
		    }

		    # a function signature
		    if ( /function/ .. /\)/ )
		    {
			$functionName = $_;
			$functionName =~ s/\s+function\s+//;
		    }

		    # the end of the function, phew!
		    if ( /\}/ )
		    {
			## push to the arrays...

			$functionName =~ s/\n//g;
			my @functionValues = ( $functionName, $functionAbstract, $functionDescription, $functionCount );
			push( @FunctionList, \@functionValues );

			$functionCount += 1;

			$functionAbstract = "";
			$functionDescription = "";
		    }
		}

		# a variable with comment
  		if ( /\/\/\// .. /;/ )
		{
		    if ( /\/\/\/.+/ )
		    {
			$varDescription = $_;
			$varDescription =~ s/\/\/\///;
			$varDescription =~ s/^\s+//;
			
		    }

		    # a variable 
		    if ( /[ ]+var[^;]+/ )
		    {
			$varName = $_;
			$varName =~ s/^\s+//;

			$varName =~ s/var \$//g;
			$varName =~ s/;//g;

#  			print $varDescription;
#  			print $varName;

			my @variableValues = ( $varName, $varDescription );
  			push( @VarList, \@variableValues );
		    }
		}
		else
		{   
                    # a uncommented variable. a lazy programmer.
		    if ( /[ ]+var[^;]+/ )
		    {
			$varName = $_;
			$varName =~ s/^\s+//;

			$varName =~ s/var \$//g;
			$varName =~ s/;//g;

#  			print $varName;

			my @variableValues = ( $varName, "" );
  			push( @VarList, \@variableValues );
		    }
		}
	    }
	}

  	if ( $foundClass == 1 )
	{
	    ## add to lists

	    $classFile = $fileName;
	    $classFile =~ s/.php//;

	    # remove leading whitespace
	    $todoItems =~ s/^\s+//g;

	    $todoItems =~ s/^[ ]+//mg;

	    # remove trailing whitespace
 	    $todoItems =~ s/\s+$//g;

	    my @classValues = ( $className, $classFile, $classPackage, $classAbstract, $classDescription, \@FunctionList, $source, \@VarList, $classVersion, $classInheritance, $todoItems );

	    push( @ClassList, \@classValues );

#	    $classCount = $classCount + 1;
	}

	close IN;	
    }
}
